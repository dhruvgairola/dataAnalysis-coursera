help()
demo()
graphics
recursion
help(graphics)
library(help="graphics")
plot
plot(x,y)
demo(package = .packages(all.available = TRUE))
demo(graphics = .packages(all.available = TRUE))
demo(graphics = .graphics(all.available = TRUE))
clear
clr()
clrscr()
clear()
cls()
cls
help()
tkcanvas
tkcanvas()
image
image()
UseMethod("Image")
function
y = x
function
()
f
d
clear
f
x <- c(1,2)
x
y <- c(1,2)
function(x,y)
1
function(x,y)
0
y <- c(3,4)
ls
ls
clear
grep
x
y
function(x, y)
1
help("function]")
help("function")
function(y=x)
r
function(y=x);
add <- function(x+y)
23 +4
add <- function(x) x
add(1)
add(5)
add2 <- function(x, y) (x+y)
add2(1,2)
add3 <- function(x) (x+y)
add3(2,5)
add3(2:5)
2:4
2:99
add3
add3(1:5)
y
2 +3
heisenberg <- read.csv(file="/Users/dhruvgairola/Documents/Workspace/R/selfquiz-data.csv",head=TRUE,sep=",")
heisenberg
summary(heisenberg)
row.names(heisenberg)
rows(heisenberg)
row(heisenberg)
row.names(heisenberg)
col.names(heisenberg)
column.names(heisenberg)
names(heisenberg)
names
$names
attributes(heisenberg)
head(heisenberg)
rowsum(heisenberg)
rowsum.data.frame(heisenberg)
rowsum.heisenberg
rowsum.data.frame(file="/Users/dhruvgairola/Documents/Workspace/R/selfquiz-data.csv",head=TRUE,sep=",")
nrow(heisenberg)
myd = heisenberg
nrow(myd)
getwd()
x <- 1:4
getwd()
load("~/.RData")
getwd()
earch()
search()
lapply
rnorm(1:4)
x <- rnorm(1:4)
x
args(lapply)
lapply
args(quantile)
quantile(4)
quantile(0.3)
quantile(x <- rnorm(1000))
quantile(x <- rnorm(1000))
quantile(x <- rnorm(1000))
quantile(x <- rnorm(1000, 4))
runif(100)
quantile(runif(100))
quantile(runif(100))
quantile(x <- rnorm(1000, 4))
quantile(x <- rnorm(50000))
quantile(x <- rnorm(50000))
quantile(x <- rnorm(50000))
apply
args(apply)
args(rnorm)
rnorm(100)
rnorm(100)
args(rnorm)
rnorm(100)
rnorm(100)
rnorm(100)
rnorm(100)
rnorm(100)
rnorm(100)
rnorm(1000)
args(rnorm)
e <- rnorm(100)
x <- 1:100
y <- 1.5 - 3 * x + e
plot(x, y)
x <- rbinor(100, 1, 0.5)
x <- rbinom(100, 1, 0.5)
x
x <- 1:100
hist(x)
x <- rnorm(100)
hist(x)
?par
?plot
args(plot)
?par
y <- x + rnorm(100)
par(las = 1)
plot(x, y)
par(las = 2)
plot(x, y)
par(las = 1)
plot(x, y)
par(las = 2)
plot(x, y)
lines(x, y)
lines(x, y)
getwd
getwd()
pdf(file="test.pdf")
hist(x)
dev.off()
dev.list()
library(lattice)
library(nlme)
xyplot(distance~age | Subject, data = orthodont)
xyplot(distance~age | Subject, data = Orthodont)
?Orthodont
Orthodont
xyplot(distance~age | Subject, data = Orthodont)
xyplot(distance~age | Subject, data = Orthodont, type="b")
corr <- function(directory, threshold = 0) {
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
############### Constants ##############
NL <- "\n"
ID <- "id"
NOBS <- "nobs"
# create some static vectors, although I may not need them
idVector <- vector(mode = "character", length = 0)
nobVector <- vector(mode = "character", length = 0)
sulphurVector<- vector( mode="numeric", length=0)
nitrateVector<- vector( mode="numeric", length=0)
corrVector<- vector( mode="numeric", length=0)
ErrorVector<- vector( mode="numeric", length=0)   # if no correlations exceeding threshold
count_of_passed_threads <<- 0
id<- seq(1:332)
for ( i in id ) {
## parse the file names to be processed
fullname <- create_fullname ( i , directory )
## extract from csv and create a frame
ds_na_omit <- get_data( fullname)
## run a cor (relation) Maybe this should be a function too
#### where is corr called
if ( nrow ( ds_na_omit ) > threshold )   {
correlation <- x ( ds_na_omit  )
corrVector <- append( corrVector , correlation)
}
}
## Done return the vector of correlation (  0 if none meeting threshold )
return (corrVector)
}
## end of corr
############### Functions ##############
############### get_data ##############
get_data <- function(fullname)  {
# read the csv, frame it and drop the NAs
na.omit( data.frame( ( list(read.csv( fullname ))) ))
}
############### create_fullname ##############
create_fullname <- function( i, directory ) {
CSV <- ".csv"
SLASH <- "/"
## Combine id and directory to create a full name
idchar <- as.character(formatC(i, width=3, format='d', flag=0))
filename <- paste0( idchar , CSV )
returnValue<- paste0(directory, SLASH, filename)
}
############### compute_cor ##############
compute_cor <- function( ds_na_omit  ) {
count_of_passed_threads <-  count_of_passed_threads + 1
correlation <-  cor( as.numeric(ds_na_omit$sulfate), y=ds_na_omit$nitrate )
}
load(lattice)
x <- 1:10
x
data(environmental)
library(lattice)
data(environmental)
?equal.count
splom(~ environmental)
?plotmath
points()
serialize()
postscript(0)
flush
points(1:10)
args(points)
x <- 1:10
points(x)
postscript("test.ps")
x <- rnorm(1)
y <- rnorm(1)
plot(x, y)
dev.off
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
xyplot(weight ~ Time | Diet, BodyWeight)
plot(x, y)
set.seed(31);
heightsCM = rnorm(30,mean=188, sd=5);
weightsK = rnorm(30,mean=84,sd=3);
hasDaughter = sample(c(TRUE,FALSE),size=30,replace=T);
dataFrame = data.frame(heightsCM,weightsK,hasDaughter);
dataFrame
dataFrame = dataFrame(dataFrame$heightsCM > 188)
dataFrame2 = dataFrame[dataFrame$heightsCM > 188]
dataFrame2 = dataFrame[dataFrame$heightsCM > 188, colnames(dataFrame)]
dataFrame2
mean(dataFrame2$weightsK)
set.seed(41)
cauchyValues <- rcauchy(100)
set.seed(415)
?sample
sample(cauchyValues,size=10,replace=T);
str(rpois)
setseed(200)
set.seed(200)
x <- rpois(200)
x <- rpois(200, 4)
par(nrow=c(1,2))
par(cols=c(1,2))
par(ncols=c(1,2))
plot(x)
y <- rpois(200, 100)
plot(y)
plot(x)
o <- x + 1
plot(o, x)
o2 <- y + 1
plot(o2, y)
plot(rcauchy(100))
?unclass
summary(lm)
methods("mean")
show("mean")
showMethods("mean")
?color
?colors
colors()
rgb(100, 0, 100)
?rgb
rgb(1, 0, 1)
args(grep)
summary(rgep)
summary(grep)
?grep
?setOldClass
source("http://spark-public.s3.amazonaws.com/compdata/scripts/submitscript4.R")
submit()
setwd("/Users/dhruvgairola/Documents/Workspace/R/wk4/")
homicides <- readLines("homicides.txt")
getwd)
getwd()
source("count.R")
count("other")
count(cause="other")
source("count.R")
count("other")
source("count.R")
count("other")
source("count.R")
count("other")
source("count.R")
count("other")
source("count.R")
count("other")
source("count.R")
count("other")
count()
homicides <- readLines("homicides.txt")
i <- grep("[Oo]ther", homicides)
i
homicides[133]
i <- grep("Cause : [Oo]ther", homicides)
i
i <- grep("Cause: [Oo]ther", homicides)
i
i <- grep("[Uu]nknown", homicides)
i
i <- grep("Cause: [Uu]nknown", homicides)
i
length(i)
source("count.R")
submit()
submit()
submit()
homicides(2)
homicides <- readLines("homicides.txt")
homicides(2)
homicides[2]
homicides[24]
r <- regexec("<dd>.* +([0-9]*) years old</dd>", homicides[1])
regmatches(homicides[1:2], r)
r
x <- regmatches(homicides[1:2], r)
x[2]
homicides[33]
r <- regexec("<dd>.* +([0-9]*) years old</dd>", homicides)
source("agecount.R")
agecount(3)
agecount(21)
source("agecount.R")
agecount(21)
source("agecount.R")
agecount(21)
r
source("agecount.R")
agecount(21)
agecount(3)
source("agecount.R")
agecount(3)
source("agecount.R")
agecount(3)
source("agecount.R")
agecount(3)
source("agecount.R")
agecount(3)
source("agecount.R")
agecount(3)
regexec("3 years old", homicides)
regexec("21 years old", homicides)
source("agecount.R")
agecount(21)
k <- agecount(21)
k
source("agecount.R")
k <- agecount(21)
k
source("agecount.R")
k <- agecount(21)
k
k
sapply(k, function(x) { if() {}})
sapply(k, function(x) { if(!(x == -1)) { x } })
ee <- sapply(k, function(x) { if(!(x == -1)) { x } })
length(ee)
source("agecount.E")
source("agecount.R")
agecount(21)
source("agecount.R")
agecount(21)
w <- agecount(21)
length(w)
w <- agecount(3)
source("agecount.R")
w <- agecount(3)
source("agecount.R")
agecount(3)
agecount(21)
source("agecount.R")
agecount(21)
agecount(3)
r <- regexec(str, homicides)
r <- regexec("21 years old", homicides)
r
?regmatches
x <- regmatches(homicides, r)
x
source("agecount.R")
agecount(3)
source("agecount.R")
agecount(3)
source("agecount.R")
agecount(3)
agecount(21)
source("agecount.R")
agecount(21)
source("agecount.R")
agecount(21)
source("agecount.R")
agecount(21)
source("agecount.R")
agecount(21)
source("agecount.R")
agecount(21)
source("agecount.R")
agecount(21)
?nzchar
agecount(21)
source("agecount.R")
agecount(21)
source("agecount.R")
agecount(21)
source("agecount.R")
agecount(21)
source("agecount.R")
agecount(21)
source("agecount.R")
agecount(21)
source("agecount.R")
agecount(21)
source("agecount.R")
agecount(21)
source("agecount.R")
agecount(21)
source("agecount.R")
agecount(21)
source("agecount.R")
agecount(21)
source("agecount.R")
agecount(21)
source("agecount.R")
agecount(21)
source("agecount.R")
agecount(21)
r <- regexec("21 years old", homicides)
x <- regmatches(homicides, r)
x
is.na(x[100])
is.na(x[10])
source("agecount.R")
agecount(2)
source("agecount.R")
agecount(2)
r <- regexec("21 years old", homicides)
x <- regmatches(homicides, r)
length(x)
for(i in length(x)) {
print("dfdf")
}
x
for(i in 1:length(x)) {
print("dfdf")
}
source("agecount.R")
agecount(21)
source("agecount.R")
agecount(21)
source("agecount.R")
agecount(21)
source("agecount.R")
agecount(21)
source("agecount.R")
agecount(21)
source("agecount.R")
agecount(21)
submit()
submit()
submit()
submit()
